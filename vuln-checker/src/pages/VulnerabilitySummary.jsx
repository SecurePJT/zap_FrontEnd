import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';

export default function VulnerabilitySummary() {
  const location = useLocation();
  const [sortOrder, setSortOrder] = useState('asc');

  const [riskFilters, setRiskFilters] = useState({
    High: true,
    Medium: true,
    Low: true,
    Informational: true,
  });

  const exampleAlerts = [
    { risk: "High", name: "SQL Injection" },
    { risk: "Medium", name: "Content Security Policy (CSP) Header Not Set" },
    { risk: "Low", name: "Clickjacking Vulnerability" },
    { risk: "High", name: "Cross-Site Scripting (XSS)" },
    { risk: "Low", name: "Missing X-Content-Type-Options Header" },
    { risk: "Medium", name: "Missing Anti-clickjacking Header" },
    { risk: "High", name: "Remote File Inclusion" },
    { risk: "Medium", name: "Directory Listing Enabled" },
    { risk: "Low", name: "Exposed Server Version" },
    { risk: "High", name: "Command Injection" },
    { risk: "Medium", name: "Insecure Cookies" },
    { risk: "Low", name: "Missing Security Headers" },
    { risk: "High", name: "Open Redirect" },
    { risk: "Medium", name: "Outdated Libraries Detected" },
    { risk: "Low", name: "Server Banner Disclosure" },
    { risk: "High", name: "Cross-Site Request Forgery (CSRF)" },
    { risk: "Medium", name: "Improper Cache Control" },
    { risk: "Low", name: "Deprecated HTML Tags Used" },
    { risk: "High", name: "Sensitive Data Exposure" },
    { risk: "Medium", name: "Improper Input Validation" },
    { risk: "Low", name: "Autocomplete Enabled on Sensitive Fields" },
    { risk: "High", name: "Unrestricted File Upload" },
    { risk: "Medium", name: "Hardcoded Credentials" },
    { risk: "Low", name: "Verbose Error Messages" },
    { risk: "High", name: "XML External Entity (XXE) Injection" },
    { risk: "Medium", name: "Missing Secure Flag in Cookies" },
    { risk: "Low", name: "Missing HTTPOnly Flag in Cookies" },
    { risk: "High", name: "Deserialization of Untrusted Data" },
    { risk: "Medium", name: "Weak Password Policy" },
    { risk: "Low", name: "Default Credentials Still Active" },
    { risk: "High", name: "Insecure Direct Object References (IDOR)" },
    { risk: "Medium", name: "Missing Logout Functionality" },
    { risk: "Low", name: "Cacheable HTTPS Response" },
    { risk: "High", name: "Path Traversal" },
    { risk: "Medium", name: "Insecure Redirects" },
    { risk: "Low", name: "Duplicate HTTP Headers" },
    { risk: "High", name: "Authentication Bypass" },
    { risk: "Medium", name: "Weak SSL/TLS Configuration" },
    { risk: "Low", name: "Unminified JavaScript Files" },
    { risk: "High", name: "Privilege Escalation" },
    { risk: "Medium", name: "Misconfigured CORS" },
    { risk: "Low", name: "Missing X-XSS-Protection Header" },
    { risk: "High", name: "Code Injection" },
    { risk: "Medium", name: "Improper File Permissions" },
    { risk: "Low", name: "Static Credentials in JavaScript" },
    { risk: "High", name: "Unvalidated Redirects and Forwards" },
    { risk: "Medium", name: "Clickjacking in iframe" },
    { risk: "Low", name: "Insecure Meta Refresh Tag" },
    { risk: "High", name: "Business Logic Vulnerability" },
    { risk: "Medium", name: "WebSocket Vulnerability" },
    { risk: "Informational", name: "Sample Informational Vulnerability" }
  ];

  const alerts = location.state?.alerts && location.state.alerts.length > 0
    ? location.state.alerts
    : JSON.parse(localStorage.getItem('lastAlerts')) || exampleAlerts;

  useEffect(() => {
    if (alerts && alerts.length > 0) {
      localStorage.setItem('lastAlerts', JSON.stringify(alerts));
    }
  }, [alerts]);

  const riskOrder = sortOrder === 'asc'
    ? ['High', 'Medium', 'Low', 'Informational']
    : ['Informational', 'Low', 'Medium', 'High'];

  const filteredAndSortedAlerts = [...alerts]
    .filter(alert => riskFilters[alert.risk])
    .sort((a, b) => riskOrder.indexOf(a.risk) - riskOrder.indexOf(b.risk));

  const toggleRiskFilter = (risk) => {
    setRiskFilters(prev => ({
      ...prev,
      [risk]: !prev[risk],
    }));
  };

  const riskColorClass = (risk) => {
    switch (risk) {
      case 'High': return 'text-red-600';
      case 'Medium': return 'text-yellow-600';
      case 'Low': return 'text-green-600';
      case 'Informational': return 'text-blue-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-8 bg-white rounded-lg shadow-lg">
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 space-y-3 sm:space-y-0">
        <div>
          <h1 className="text-3xl font-extrabold text-gray-800">취약점 요약</h1>
          <p className="text-sm text-gray-600 mt-1">총 취약점 수: {filteredAndSortedAlerts.length}개</p>
        </div>
        <Link
          to="/"
          className="text-indigo-600 hover:text-indigo-800 text-sm underline font-medium"
        >
          ⬅ 메인 페이지로
        </Link>
      </div>

      <div className="flex flex-wrap gap-4 items-center mb-6">
        {['High', 'Medium', 'Low', 'Informational'].map((risk) => (
          <label key={risk} className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={riskFilters[risk]}
              onChange={() => toggleRiskFilter(risk)}
              className="form-checkbox h-5 w-5 text-indigo-600"
            />
            <span className="text-sm text-gray-700">{risk}</span>
          </label>
        ))}
        <label className="flex items-center space-x-2 ml-4">
          <input
            type="checkbox"
            checked={sortOrder === 'desc'}
            onChange={() => setSortOrder(prev => (prev === 'asc' ? 'desc' : 'asc'))}
            className="form-checkbox h-5 w-5 text-indigo-600"
          />
          <span className="text-sm text-gray-700">위험도 내림차순</span>
        </label>
      </div>

      <table className="w-full table-auto border-collapse">
        <thead>
          <tr className="bg-indigo-100">
            <th className="border border-indigo-300 px-6 py-3 text-left text-indigo-700 uppercase tracking-wide">취약점 이름</th>
            <th className="border border-indigo-300 px-6 py-3 text-left text-indigo-700 uppercase tracking-wide">위험도 / 참고 링크</th>
          </tr>
        </thead>
        <tbody>
          {filteredAndSortedAlerts.map((alert, index) => (
            <tr
              key={index}
              className={`hover:bg-indigo-50 ${index % 2 === 0 ? 'bg-white' : 'bg-indigo-50'}`}
            >
              <td className="border border-indigo-300 px-6 py-3">
                <Link
                  to={`/vulnerability-detail/${encodeURIComponent(alert.name)}`}
                  state={{ alerts }}
                  className="text-indigo-600 hover:text-indigo-900 font-semibold underline"
                >
                  {alert.name}
                </Link>
              </td>
              <td className={`border border-indigo-300 px-6 py-3 font-medium ${riskColorClass(alert.risk)}`}>
                <div className="flex flex-col">
                  <span>{alert.risk}</span>
                  {alert.uri && (
                    <span className="text-xs text-blue-600 mt-1 break-words">
                      {alert.uri}
                    </span>
                  )}
                </div>
              </td>
            </tr>
          ))}
          {filteredAndSortedAlerts.length === 0 && (
            <tr>
              <td colSpan={2} className="text-center py-6 text-gray-500">
                선택한 위험도에 해당하는 취약점이 없습니다.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}
