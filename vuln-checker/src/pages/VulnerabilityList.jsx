import React, { useState } from 'react';
import axios from 'axios';
import AlertList from '../components/AlertList';

export default function VulnerabilityList() {
  const [urlInput, setUrlInput] = useState('');
  const [selectedOptions, setSelectedOptions] = useState({
    sql: false,
    xss: false,
    csrf: false,
    clickjacking: false,
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [responseData, setResponseData] = useState([]);

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setSelectedOptions((prev) => ({
      ...prev,
      [name]: checked,
    }));
  };

  const handleUrlChange = (e) => {
    setUrlInput(e.target.value);
  };

  const handleConfirm = async () => {
    if (!urlInput.trim()) {
      setError('URL을 입력해주세요.');
      setResponseData([]);
      return;
    }

    // 최신 상태를 기반으로 선택된 항목 확인
    const selected = Object.entries(selectedOptions)
      .filter(([_, isChecked]) => isChecked)
      .map(([key]) => key);

    console.log('✅ 선택된 옵션들:', selected);

    setLoading(true);
    setError(null);
    setResponseData([]);

    try {
      let apiUrl = '';

      if (selected.length === 0) {
        apiUrl = 'http://localhost:5000/api/scan';
      } else {
        const joined = selected.join('/');
        apiUrl = `http://localhost:5000/api/scan/${joined}`;
      }

      console.log('📡 요청 보낼 URL:', apiUrl);

      const response = await axios.post(apiUrl, { url: urlInput });
      const result = response.data.alerts ?? response.data;
      setResponseData(result);
    } catch (err) {
      console.error('❌ API 요청 실패:', err);
      setError('API 요청 실패: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">보안 취약점 점검</h1>

      <div className="mb-4">
        <label htmlFor="urlInput" className="block mb-1 font-semibold">
          점검할 URL 입력
        </label>
        <input
          id="urlInput"
          type="text"
          value={urlInput}
          onChange={handleUrlChange}
          placeholder="url을 입력해주세요."
          className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600"
        />
      </div>

      <div className="mb-4 space-y-2">
        {Object.keys(selectedOptions).map((option) => (
          <label key={option} className="flex items-center space-x-2">
            <input
              type="checkbox"
              name={option}
              checked={selectedOptions[option]}
              onChange={handleCheckboxChange}
              className="form-checkbox h-5 w-5 text-blue-600"
            />
            <span className="capitalize">{option}</span>
          </label>
        ))}
      </div>

      <button
        onClick={handleConfirm}
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        disabled={loading}
      >
        {loading ? '분석 중...' : '확인'}
      </button>

      <div className="mt-6">
        {error && <p className="text-red-600">{error}</p>}
        {responseData.length > 0 && <AlertList alerts={responseData} />}
      </div>
    </div>
  );
}





