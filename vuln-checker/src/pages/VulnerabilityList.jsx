import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

export default function VulnerabilityList() {
  const [urlInput, setUrlInput] = useState('');
  const [selectedOptions, setSelectedOptions] = useState({
    sql: false,
    xss: false,
    csrf: false,
    file: false,
  });
  const [analysisType, setAnalysisType] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [responseData, setResponseData] = useState(null);

  const navigate = useNavigate();

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setSelectedOptions((prev) => ({ ...prev, [name]: checked }));
  };

  const handleUrlChange = (e) => {
    setUrlInput(e.target.value);
  };

  const handleAnalysisTypeChange = (e) => {
    setAnalysisType(e.target.value);
  };

  const handleConfirm = async () => {
    if (!urlInput.trim()) {
      setError('URL을 입력해주세요.');
      setResponseData(null);
      return;
    }

    setLoading(true);
    setError(null);
    setResponseData(null);

    try {
      const selected = Object.entries(selectedOptions)
        .filter(([_, v]) => v)
        .map(([k]) => k);

      let apiUrl = 'http://localhost:5000/api/scan';

      if (selected.length > 0) {
        apiUrl += '/' + selected.join('/');
      }

      if (analysisType) {
        apiUrl += '/' + analysisType;
      }

      const response = await axios.post(apiUrl, { url: urlInput });

      setResponseData(response.data);
    } catch (err) {
      setError('API 요청 실패: ' + (err.response?.data?.message || err.message));
      setResponseData(null);
    } finally {
      setLoading(false);
    }
  };

  const goToSummary = () => {
    navigate('/vulnerability-summary', { state: { alerts: responseData?.alerts || [] } });
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">보안 취약점 점검</h1>

      {/* URL 입력 */}
      <div className="mb-4">
        <label htmlFor="urlInput" className="block mb-1 font-semibold">
          점검할 URL 입력
        </label>
        <input
          id="urlInput"
          type="text"
          value={urlInput}
          onChange={handleUrlChange}
          placeholder="url을 입력해주세요."
          className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600"
        />
      </div>

      {/* 분석 유형 선택 */}
      <div className="mb-4">
        <label htmlFor="analysisType" className="block mb-1 font-semibold">
          분석 유형 선택
        </label>
        <select
          id="analysisType"
          value={analysisType}
          onChange={handleAnalysisTypeChange}
          className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600"
        >
          <option value="">선택하지 않음</option>
          <option value="simple">간단분석</option>
          <option value="advanced">상세분석</option>
        </select>
      </div>

      {/* 점검 유형 체크박스 */}
      <div className="mb-4 space-y-2">
        <p className="font-semibold mb-1">점검 유형 선택</p>
        {Object.keys(selectedOptions).map((option) => (
          <label key={option} className="inline-flex items-center space-x-2 mr-4">
            <input
              type="checkbox"
              name={option}
              checked={selectedOptions[option]}
              onChange={handleCheckboxChange}
              className="form-checkbox h-5 w-5 text-blue-600"
            />
            <span className="capitalize">{option}</span>
          </label>
        ))}
      </div>

      {/* 확인 버튼 */}
      <button
        onClick={handleConfirm}
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        disabled={loading}
      >
        {loading ? '분석 중...' : '확인'}
      </button>

      {/* vulnerability-summary 페이지 이동 버튼 - 항상 활성화 */}
      <button
        onClick={goToSummary}
        className="mt-4 px-4 py-2 bg-green-600 rounded text-white hover:bg-green-700"
      >
        취약점 요약 페이지 보기
      </button>

      {/* 에러 메시지 */}
      {error && <p className="mt-6 text-red-600">{error}</p>}
    </div>
  );
}






