import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

export default function VulnerabilityList() {
  const [urlInput, setUrlInput] = useState('');
  const [scanMode, setScanMode] = useState('');
  const [popupOpen, setPopupOpen] = useState(false);

  const [scanSettings, setScanSettings] = useState({
    crawling: 'O',
    passive: 'X',
    active: 'X',
    types: {
      sql: false,
      xss: false,
    },
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [responseData, setResponseData] = useState(null);

  const navigate = useNavigate();

  const handleScanModeChange = (e) => {
    const mode = e.target.value;
    setScanMode(mode);

    if (mode === 'simple') {
      setScanSettings((prev) => ({
        ...prev,
        crawling: 'O',
        passive: 'O',
        active: 'X',
      }));
    } else if (mode === 'detailed') {
      setScanSettings((prev) => ({
        ...prev,
        crawling: 'O',
        passive: 'O',
        active: 'O',
      }));
    } else {
      setScanSettings((prev) => ({
        ...prev,
        crawling: 'O',
        passive: 'X',
        active: 'X',
      }));
    }
  };

  const handleConfirm = async () => {
    if (!urlInput.trim()) {
      setError('URL을 입력해주세요.');
      setResponseData(null);
      return;
    }

    const selectedTypes = Object.values(scanSettings.types).some((v) => v);

    if (
      scanSettings.crawling === 'O' &&
      scanSettings.passive === 'X' &&
      scanSettings.active === 'X' &&
      !selectedTypes
    ) {
      alert('크롤링만 활성화된 상태입니다. 패시브 또는 액티브 스캔을 활성화하거나 SQL/XSS 점검을 선택해주세요.');
      return;
    }

    setLoading(true);
    setError(null);
    setResponseData(null);

    try {
      let apiUrl = 'http://10.20.34.145:8088';

      const checkedTypes = Object.entries(scanSettings.types)
        .filter(([_, checked]) => checked)
        .map(([type]) => type)
        .join('');

      if (checkedTypes) {
        const options = [];
        if (scanSettings.crawling === 'O') options.push('crawl');
        options.push(checkedTypes);
        apiUrl += '/' + options.join('-');
      } else {
        const options = [];
        if (scanSettings.crawling === 'O') options.push('crawl');
        if (scanSettings.active === 'O') options.push('active');
        if (scanSettings.passive === 'O') options.push('passive');

        if (options.length > 0) {
          apiUrl += '/' + options.join('-');
        }
      }

      const requestBody = { url: urlInput };

      const response = await axios.post(apiUrl, requestBody);
      console.log(response);
      setResponseData(response.data);
    } catch (err) {
      setError('API 요청 실패: ' + (err.response?.data?.message || err.message));
      setResponseData(null);
    } finally {
      setLoading(false);
    }
  };

  const goToSummary = () => {
    navigate('/vulnerability-summary', { state: { alerts: responseData?.alerts || [] } });
  };

  const handleSettingsChange = (e) => {
    const { name, value } = e.target;
    setScanSettings((prev) => ({ ...prev, [name]: value }));
  };

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setScanSettings((prev) => ({
      ...prev,
      types: { ...prev.types, [name]: checked },
    }));
  };

  const confirmPopupSettings = () => {
    setPopupOpen(false);
    setScanMode('');
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">보안 취약점 점검</h1>

      <div className="mb-4">
        <label className="block font-semibold mb-1">URL</label>
        <input
          type="text"
          value={urlInput}
          onChange={(e) => setUrlInput(e.target.value)}
          placeholder="점검할 URL을 입력하세요"
          className="w-full px-3 py-2 border border-gray-300 rounded"
        />
      </div>

      <div className="mb-4">
        <p className="font-semibold mb-1">분석 모드</p>
        <label className="mr-4">
          <input
            type="radio"
            name="scanMode"
            value="simple"
            checked={scanMode === 'simple'}
            onChange={handleScanModeChange}
            disabled={popupOpen}
          />{' '}
          간단 분석
        </label>
        <label>
          <input
            type="radio"
            name="scanMode"
            value="detailed"
            checked={scanMode === 'detailed'}
            onChange={handleScanModeChange}
            disabled={popupOpen}
          />{' '}
          상세 분석
        </label>
      </div>

      <button
        onClick={() => setPopupOpen(true)}
        className="mb-4 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
      >
        상세 설정
      </button>

      <button
        onClick={handleConfirm}
        className="ml-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        disabled={loading}
      >
        {loading ? '분석 중...' : '분석 시작'}
      </button>

      <button
        onClick={goToSummary}
        className="ml-2 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
      >
        요약 페이지 보기
      </button>

      {error && <p className="text-red-600 mt-4">{error}</p>}

      {popupOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50">
          <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">상세 설정</h2>

            <div className="mb-3">
              <label className="block font-semibold mb-1">크롤링</label>
              <select
                name="crawling"
                value={scanSettings.crawling}
                onChange={handleSettingsChange}
                className="w-full px-3 py-2 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            <div className="mb-3">
              <label className="block font-semibold mb-1">패시브 스캔</label>
              <select
                name="passive"
                value={scanSettings.passive}
                onChange={handleSettingsChange}
                className="w-full px-3 py-2 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            <div className="mb-3">
              <label className="block font-semibold mb-1">엑티브 스캔</label>
              <select
                name="active"
                value={scanSettings.active}
                onChange={handleSettingsChange}
                className="w-full px-3 py-2 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            <div className="mb-3">
              <label className="block font-semibold mb-1">점검 유형</label>
              {Object.entries(scanSettings.types).map(([type, value]) => (
                <label key={type} className="block">
                  <input
                    type="checkbox"
                    name={type}
                    checked={value}
                    onChange={handleCheckboxChange}
                    className="mr-2"
                  />
                  {type.toUpperCase()}
                </label>
              ))}
            </div>

            <div className="flex justify-end mt-4">
              <button
                onClick={() => setPopupOpen(false)}
                className="px-4 py-2 mr-2 border rounded hover:bg-gray-100"
              >
                닫기
              </button>
              <button
                onClick={confirmPopupSettings}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                확인
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}









