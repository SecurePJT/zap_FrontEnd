import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

export default function VulnerabilityList() {
  const [urlInput, setUrlInput] = useState('');
  const [selectedOptions, setSelectedOptions] = useState({ sql: false, xss: false });
  const [crawling, setCrawling] = useState('O');
  const [activeScan, setActiveScan] = useState('X');
  const [passiveScan, setPassiveScan] = useState('O');
  const [showSettings, setShowSettings] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [responseData, setResponseData] = useState(null);

  const navigate = useNavigate();

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setSelectedOptions((prev) => ({ ...prev, [name]: checked }));
  };

  const handleUrlChange = (e) => {
    setUrlInput(e.target.value);
  };

  const handleConfirm = async () => {
    if (!urlInput.trim()) {
      setError('URL을 입력해주세요.');
      setResponseData(null);
      return;
    }

    setLoading(true);
    setError(null);
    setResponseData(null);

    try {
      const selected = Object.entries(selectedOptions)
        .filter(([_, v]) => v)
        .map(([k]) => k);

      let apiUrl = 'http://localhost:5000/api/scan';
      if (selected.length > 0) {
        apiUrl += '/' + selected.join('/');
      }

      apiUrl += `?crawling=${crawling}&activeScan=${activeScan}&passiveScan=${passiveScan}`;

      const response = await axios.post(apiUrl, { url: urlInput });
      setResponseData(response.data);
    } catch (err) {
      setError('API 요청 실패: ' + (err.response?.data?.message || err.message));
      setResponseData(null);
    } finally {
      setLoading(false);
    }
  };

  const goToSummary = () => {
    navigate('/vulnerability-summary', { state: { alerts: responseData?.alerts || [] } });
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">보안 취약점 점검</h1>

      {/* URL 입력 */}
      <div className="mb-4">
        <label htmlFor="urlInput" className="block mb-1 font-semibold">점검할 URL 입력</label>
        <input
          id="urlInput"
          type="text"
          value={urlInput}
          onChange={handleUrlChange}
          placeholder="url을 입력해주세요."
          className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600"
        />
      </div>

      {/* 상세 설정 버튼 */}
      <button
        onClick={() => setShowSettings(true)}
        className="mb-4 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
      >
        상세 설정
      </button>

      {/* 확인 버튼 */}
      <button
        onClick={handleConfirm}
        className="ml-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        disabled={loading}
      >
        {loading ? '분석 중...' : '분석 시작'}
      </button>

      {/* 요약 페이지 이동 */}
      <button
        onClick={goToSummary}
        className="ml-2 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
      >
        취약점 요약 페이지 보기
      </button>

      {/* 에러 메시지 */}
      {error && <p className="mt-6 text-red-600">{error}</p>}

      {/* 설정 모달 */}
      {showSettings && (
        <div className="fixed top-0 left-0 w-full h-full bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">상세 설정</h2>

            {/* 크롤링 */}
            <div className="mb-4">
              <label className="block font-semibold mb-1">크롤링</label>
              <select
                value={crawling}
                onChange={(e) => setCrawling(e.target.value)}
                className="w-full px-2 py-1 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            {/* 패시브 스캔 */}
            <div className="mb-4">
              <label className="block font-semibold mb-1">패시브 스캔</label>
              <select
                value={passiveScan}
                onChange={(e) => setPassiveScan(e.target.value)}
                className="w-full px-2 py-1 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            {/* 엑티브 스캔 */}
            <div className="mb-4">
              <label className="block font-semibold mb-1">엑티브 스캔</label>
              <select
                value={activeScan}
                onChange={(e) => setActiveScan(e.target.value)}
                className="w-full px-2 py-1 border rounded"
              >
                <option value="O">O</option>
                <option value="X">X</option>
              </select>
            </div>

            {/* 점검 유형 체크박스 */}
            <div className="mb-4">
              <p className="font-semibold mb-1">점검 유형 선택</p>
              {Object.keys(selectedOptions).map((option) => (
                <label key={option} className="inline-flex items-center mr-4 space-x-2">
                  <input
                    type="checkbox"
                    name={option}
                    checked={selectedOptions[option]}
                    onChange={handleCheckboxChange}
                    className="form-checkbox h-5 w-5 text-blue-600"
                  />
                  <span className="capitalize">{option}</span>
                </label>
              ))}
            </div>

            {/* 닫기/확인 버튼 */}
            <div className="flex justify-end">
              <button
                onClick={() => setShowSettings(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                확인
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}






